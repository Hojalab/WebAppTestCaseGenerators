# Thanks to http://github.com/threedaymonk/treetop-example/blob/master/complex_html.treetop
# for the basis of this grammar.
grammar ERBGrammar
  rule document
    (erb_output / erb / html_doctype / html_directive / html_close_tag / html_open_tag / html_self_closing_tag / newline / whitespace / text)* <ERBDocument>
  end
 
  rule erb_output
    erb_open_output_bracket ruby_code erb_close_bracket <ERBOutputTag>
  end

  rule erb_open_output_bracket
    '<%=' {
      def content
        :erb_open_output_bracket
      end
    }
  end

  rule erb
    erb_open_bracket ruby_code erb_close_bracket <ERBTag>
  end

  rule erb_open_bracket
    '<%' {
      def content
        :erb_open_bracket
      end
    }
  end

  rule erb_close_bracket
    '%>' {
      def content
        :erb_close_bracket
      end
    }
  end

  rule newline
    [\n\r] {
      def content
        :newline
      end
    }
  end

  rule ruby_code
    whitespace? [^%>]* whitespace? {
      def content
        [:ruby_code, text_value]
      end
    }
  end

  rule tab
    "\t" {
      def content
        :tab
      end
    }
  end

  rule whitespace
    (newline / tab / [\s]) {
      def content
        :whitespace
      end
    }
  end

  rule text
    [^<]+ {
      def content
        [:text, text_value]
      end
    }
  end

  rule html_open_tag
    "<" html_tag_name attribute_list ">" <HTMLOpenTag>
  end

  rule html_self_closing_tag
    '<' tag_name:html_tag_name attrs:attribute_list? whitespace '/>' <HTMLSelfClosingTag>
  end

  rule html_close_tag
    "</" html_tag_name ">" <HTMLCloseTag>
  end

  rule html_tag_name
    [A-Za-z0-9_:-]+ {
      def content
        text_value
      end
    }
  end

  rule html_doctype
    '<!DOCTYPE' [^>]* '>' {
      def content
        line "rawtext '#{text_value}'"
      end
    }
  end
  
  rule html_directive
    '<!' [^>]* '>' {
      def content
        line "rawtext '#{text_value}'"
      end
    }
  end

  rule attribute_list
    attribute* {
      def content
        elements.inject({}){ |hash, e| hash.merge(e.content) }
      end
    }
  end

  rule attribute
    whitespace+ html_tag_name "=" quoted_value {
      def content
        {elements[1].content => elements[3].content}
      end
    }
  end

  rule quoted_value
    ('"' [^"]* '"' / "'" [^']* "'") {
      def content
        elements[1].text_value
      end
    }
  end  
end
