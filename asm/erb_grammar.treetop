# Thanks to http://github.com/threedaymonk/treetop-example/blob/master/complex_html.treetop
# for the basis of this grammar.
grammar ERBGrammar
  rule document
    whitespace node whitespace x:document? <ERBDocument>
  end

  rule node
    erb_output / erb / html_doctype / html_directive / html_self_closing_tag / html_close_tag / html_open_tag / text
  end
 
  rule erb_output
    erb_open_output_bracket whitespace ruby_code whitespace erb_close_bracket <ERBOutputTag>
  end

  rule erb_open_output_bracket
    '<%=' {
      def content
        :erb_open_output_bracket
      end
    }
  end

  rule erb
    erb_open_bracket whitespace ruby_code whitespace erb_close_bracket <ERBTag>
  end

  rule erb_open_bracket
    '<%' {
      def content
        :erb_open_bracket
      end
    }
  end

  rule erb_close_bracket
    '%>' {
      def content
        :erb_close_bracket
      end
    }
  end

  rule newline
    [\n\r] {
      def content
        :newline
      end
    }
  end

  rule ruby_code
    (('%' !'>') /  [^%])* <RubyCode>
  end

  rule tab
    "\t" {
      def content
        :tab
      end
    }
  end

  rule whitespace
    (newline / tab / [\s])* {
      def content
        :whitespace
      end
    }
  end

  rule text
    (([<>] !(html_tag_name / [/%!])) / [^<>])+ {
      def content
        stripped = text_value.strip
        [:text, if stripped.empty?
          ""
        else
          #stripped.html_unescape.gsub(/\'/, "\\\\'")
          stripped.gsub(/\'/, "\\\\'")
        end]
      end
    }
  end

  rule html_open_tag
   '<' tag_name:html_tag_name attrs:html_tag_attributes? whitespace '>' <HTMLOpenTag>
  end

  rule html_self_closing_tag
    '<' tag_name:html_tag_name attrs:html_tag_attributes? whitespace '/>' <HTMLSelfClosingTag>
  end

  rule html_close_tag
    "</" tag_name:html_tag_name ">" <HTMLCloseTag>
  end

  rule html_tag_name
    [A-Za-z0-9_:-]+ {
      def content
        text_value
      end
    }
  end

  rule html_doctype
    '<!DOCTYPE' [^>]* '>' {
      def content
        line "rawtext '#{text_value}'"
      end
    }
  end
  
  rule html_directive
    '<!' [^>]* '>' {
      def content
        [:html_directive, text_value]
      end
    }
  end

  rule html_tag_attributes
    head:html_tag_attribute tail:html_tag_attributes* <HTMLTagAttributes>
  end

  rule html_tag_attribute
    whitespace n:(html_tag_name) whitespace '=' whitespace v:quoted_value whitespace <HTMLTagAttribute>
  end

  rule quoted_value
    (('"' val:([^"]*) '"') / ('\'' val:([^']*) '\'')) {
      def content
        val.text_value
      end
    
      def convert
        extract_erb(val.text_value)
      end
      
      def parenthesize_if_necessary(s)
        return s if s.strip =~ /^\(.*\)$/ || s =~ /^[A-Z0-9_]*$/i
        "(" + s + ")"
      end
      
      def extract_erb(s, parenthesize = true)
        if s =~ /^(.*?)<%=(.*?)%>(.*?)$/
          #pre, code, post = $1.html_unescape.escape_single_quotes, $2, $3.html_unescape.escape_single_quotes
          pre, code, post = $1, $2, $3
          out = ""
          out = "'#{pre}' + " unless pre.length == 0
          out += parenthesize_if_necessary(code.strip)
          unless post.length == 0
            post = extract_erb(post, false)
            out += " + #{post}"
          end
          out = parenthesize_if_necessary(out) if parenthesize
          out
        else
          #"'" + s.html_unescape.escape_single_quotes + "'"
          "'" + s + "'"
        end
      end
    }
  end
end
